ДРАЙВЕР ИНТЕРФЕЙСА ARM-NMC3 ДЛЯ ПЛАТФОРМ НА БАЗЕ ЦУПП.
РУКОВОДСТВО ПРОГРАММИСТА

1. Назначение драйвера
Драйвер предназначен для поддержки взаимодействия ядра ARM и ядер NMC3 таких платформ, как ЦУПП и УЕМД.

2. Функции драйвера

1)Управление состоянием ядра NMC3. Возможные состояния NMC3:
 - останов после аппаратного сброса СБИС ДЦТС К1879ХБ1Я;
- выполнение приложения NMC3;
- ожидание команды от программы ARM.

NMC3 находится в состоянии останова после аппаратнного сброса. Из этого состояния NMC3 выходит
по сигналу NMI, выдаваемому драйвером интерфейса.
После выхода из состояния останова запускается монитор NMC3, который инициализирует устройства
NMC3 и переходит в соотояние ожидания команды от драйвера.
Стартовая функция приложения NMC3 должна быть совместимой по вызову со стартовой функции main()
приложений C++:

int <function name> (int argc, char* argv[]) {};

Выполнение приложения NMC3 начинается по команде драйвера. После завершения работы приложения
NMC3 оно передаёт управление и код своего завершения работы монитору NMC3, который, в свою
очередь, передаёт код завершения приложения NMC3 драйверу, после чего переходит в состояние
ожидания команды от драйвера.

Возможно досрочное окончание работы приложения NMC3 по сигналу от драйвера. В этом случае
монитор NMC3 переинициализирует программную среду NMC3 (стек и служебные переменные монитора)
и переходит в состояние ожидания команды от драйвера. Аппаратная среда NMC (напр., AFIFO, WFIFO)
остаётся в состоянии, предшествующем сигналу окончания работы приложения от драйвера.

2)Инициализация NMC3 после начального старта. Монитор NMC3, используемый по умолчанию, входит
в состав драйвера. Есть возможность замены монитора NMC3 по умолчанию на монитор NMC3,
загруженный драйвером в процессе инициализации NMC3 .

3)Запись драйвером данных во внутреннюю память NMC3.

4)Чтение драйвером данных из внутренней памяти NMC3.

5)Загрузка драйвером массива, содержащего приложение NMC3 в формате ELF, собранное с помощью
средств разработки программ NMC3 (NMSDK).

6)Старт приложения NMC3 по команде драйвера и обработка драйвером сигнала о её окончании.

7)Досрочное окончание приложения NMC3 по команде драйвера.

8)Возбуждение драйвером прерывания с передачей аргумента приложению NMC3.

9)Возбуждение прерывания ARM по запросу приложения NMC3 с передачей аргумента драйверу.
Для этого программа-пользователь драйвера должна определить функцию-обработчик для передачи
ей управления и аргумента в контексте обработки прерывания.

3. Операционные среды

В процессе работы драйвер, работающий в среде Linux ядра ARM, взаимодействует с монитором
ядра NMC3. Дла обслуживания этого взаимодействия реализованы два API:
1)API ядра Linux;
2)API библиотеки NMC3.

4. API ядра Linux
Функции API объявлены в файле 'include/linux/rcmod_soc_nmc3.h' исходных текстов ядра Linux.
Возвращаемые значения содержат код возврата типа 'int' или указатель. В случае ошибочного
завершения функции это отрицательное значение или NULL.
Функции могут вызываться независимо из разных процессов Linux (сейчас число таких
процессов ограничено значением CONFIG_NMC3_DESCRIPTORS_LIMIT, определяемым в процессе
конфигурации ядра).

1) struct __NMC3_thread_descriptor* nmc3_find_device (char* device_name);
Функция получения описателя устройства интерфейса ARM-NMC3.

Параметр  'device_name' должен содержать строку с именем устройства, совпадающим с именем
в поле 'name' структуры типа 'struct platform_device'  инициализации платформы.
Далее описатель устройства должен использоваться при вызове функций данного API.

2) int nmc3_release_dscr (struct __NMC3_thread_descriptor* thr_dscr);
Функция освобождения описателя устройства интерфейса ARM-NMC3.

3) int nmc3_start (struct __NMC3_thread_descriptor* thr_dscr, void* init_code,
	size_t init_code_ln);

Функция загрузки и запуска монитора NMC3. Функция может вызываться многократно из
разных процессов. Фактически же загрузка и запуск монитора выполняются однократно
при первом вызове данной функции после включения питания.

Параметры ' init_code' и ' init_code_ln' определяют массив памяти адресного пространства
ядра Linux, содержащий монитор NMC3 в формате ELF.
В случае использования монитора NMC3 по умолчанию  параметр 'init_code' должен быть равным
NULL, а параметр 'init_code_ln' должен быть равным нулю.

4) int nmc3_elf_upload (struct __NMC3_thread_descriptor* thr_dscr, void* app_ptr,
        size_t app_ln, __u32* app_entry);
Функция загрузки приложения NMC3 в формате ELF.

Параметр 'app_entry' – указатель на возвращаемое значение точки входа в приложение.
Должен использоваться в дальнейшем при вызове функции nmc3_app_run().

Приложение во время сборки должно быть настроено на работу в адресах >= 0x300
пространства физических адресов NMC3.

5) int nmc3_app_run (struct __NMC3_thread_descriptor* thr_dscr, unsigned long app_entry,
	unsigned int param,
        void (*app_cb) (struct __NMC3_thread_descriptor* thr, int ret_code));
Функция старта ранее загруженного приложения NMC3.

Функция может быть использована, если в данный момент на NMC3 не работает приложение,
активированнoe процессом с другим thr_dscr.

Параметр 'param' - параметр, передаваемый стартовой функции приложения NMC3. Стартовая
функция должна быть совместимой по вызову со стартовой функции main() приложений C++:
int <function name> (int argc, char* argv[]) {};
Приложение NMC3 получит параметр 'param' в виде значения указателя argv[1];

Параметр 'app_cb' – указатель на функцию, вызываемую после окончания работы этого
приложения NMC3.
Будет исполняться в контексте прерывания.
Если app_cb == NULL, никакая функция после окончания приложения NMC3 вызываться не будет.

6) int nmc3_app_stop_nmi (struct __NMC3_thread_descriptor* thr_dscr);
Функция прекращения работы ранее запущенного приложения NMC3 с помощью немаскируемого прерывания.

Функция может быть использована, если в данный момент на NMC3 не работает приложение,
активированнoe процессом с другим thr_dscr.

Эта функция из-за особенностей аппаратной реализации не может быть использована на платформе УЕМД.

7) int nmc3_app_stop_irq (struct __NMC3_thread_descriptor* thr_dscr);
Функция прекращения работы ранее запущенного приложения NMC3 с помощью маскируемого
прерывания. Для её успешного срабатывания приложение NMC3 не должно надолго запрещать
прерывания. В противном случае возможно зависание ARM до момента разрешения прерывания.

Функция может быть использована, если в данный момент на NMC3 не работает приложение,
активированнoe процессом с другим thr_dscr.

8) int nmc3_request_interrupt (struct __NMC3_thread_descriptor* thr_dscr, __u32 param);
Функция возбуждения запроса прерывания приложения NMC3.

Параметр param будет передан пользовательской программе обработки прерывания NMC3.
Может содержать указатель на область внутренней памяти NMC3 в пространстве физических адресов.

9) int nmc3_mem_write (struct __NMC3_thread_descriptor* thr_dscr,
        unsigned long dst, void* src, size_t ln);
Функция записи данных во внутреннюю память NMC3.

Параметры:
dst – указатель на область внутренней памяти NMC3 в пространстве физических адресов.
src – указатель на область памяти ядра Linux.
ln – длина массива данных в байтах.

При вызове функции в служебных целях используется маскируемое прерывание NMC3.
Т.е. работа приложения NMC3 будет прервана на время записи данных.
Если прерывания NMC3 во время работы функции запрещены, ARM может зависнуть
до момента разрешения прерываний NMC3.

10) int nmc3_mem_read (struct __NMC3_thread_descriptor* thr_dscr,
        void* dst, unsigned long src, size_t ln);
Функция чтения данных из внутренней памяти NMC3.

Параметры:
dst – указатель на область памяти ядра Linux.
src – указатель на область внутренней памяти NMC3 в пространстве физических адресов.
ln – длина массива данных в байтах.

При вызове функции в служебных целях используется маскируемое прерывание NMC3.
Т.е. работа приложения NMC3 будет прервана на время записи данных.

Если прерывания NMC3 во время работы функции запрещены, ARM может зависнуть до момента
разрешения прерываний NMC3.

11) int nmc3_set_handler (struct __NMC3_thread_descriptor* thr_dscr,
        void (*irq_cb) (int irq, __u32 msg));
Функция установки обработчика прерывания от NMC3 программой-пользователем драйвера.
Установленный обработчик будет вызываться в контексте прерываний ядра Linux.

5. Конфигурация ядра для использования драйвера

Исходные файлы драйвера:

drivers/misc/rcmod_soc_nmc3.c
drivers/misc/rcmod_soc_nmc3_initnmc.h
include/linux/rcmod_soc_nmc3.h

Исходные файлы дополнительного драйвера для демонстрации использования основного драйвера:
drivers/misc/rcmod_soc_nmc3_test.c
drivers/misc/rcmod_soc_nmc3_test.h

Во время конфигурации ядра необходимо установить равными 'y' или 'm' строчку

Device Drivers  --->Misc devices  --->RC Module SoCs ARM-NMC3 interface

При желании использовать тестовый (демонстрационный) драйвер, необходимо установить
равными ' y' или 'm' строчку

Device Drivers  --->Misc devices  --->RC Module SoCs ARM-NMC3 interface driver testing

Для изменения ограничения на число процессов, одновременно работающих с NMC3, необходимо
изменить значение в

Device Drivers  --->Misc devices  --->RCMOD_SOC_NMC3 descriptors limit

5. API библиотеки NMC3

Функции API объявлены в файле 'nm/sync/nmc_load.h' архива демонстрационных программ драйвера.
1) int ncl_getProcessorNo(void);
Функция чтения номера ядра NMC3 в составе микросхемы, на котором исполняется
вызывающее приложение.

2) int ncl_rd_intr_mask (void);
Функция чтения маски контроллера прерываний NMC3.

3) void ncl_set_handler (ISRType irq_cb);
Функция установки обработчика прерывания от ARM на NMC3. 
ISRType определён следующим образом:

typedef void (ISRType)(void*);

4) void ncl_request_interrupt (unsigned int msg);
Функция возбуждения запроса прерывания ядра Linux.

6. Примеры программ, взаимодействующих с драйвером в среде Linux и на NMC3

Примеры программ поставляются пользователю драйвера в качестве отдельного архива 'nmc3_drv_demo.zip'.

Архив содержит:
1)Исходные тексты монитора NMC3, используемые драйвером по умолчанию; -  подкаталог nm/setup;
2)Исходные тексты библиотеки API NMC3 - nm/sync;
3)Исходные тексты демонстрационного приложения NMC3 – nm/app;
4)Исходные тексты демонстрационного приложения пользовательского пространства Linux – Test_Suite_NMC3;
Для работы с демонстрационным приложением  пользовательского пространства Linux следует
использовать дополнительный драйвер 'rcmod_soc_nmc3_test'.

Исполняемые файлы примеров и файл библиотеки дла NMC3 поставляются в архиве 'nmc3_drv_demo_bin.zip'.
 
Для трансляции, компиляции и сборки исходных примеров и библиотеки на хост-компьютере
необходимо отредактировать файлы с именем 'Makefile' в перечисленных директориях с точки
зрения соответствия путей структуре диска хост-компьютера и выполнить 'make'.

