/*
 * include/linux/module_vdu.h - Module VDU header
 *
 *	Copyright (C) 2008 Module
 *	Written by MSU, CMC dept., LVK lab http://lvk.cs.msu.su
 *
 *  This file is subject to the terms and conditions of the GNU General Public
 *  License. See the file COPYING in the main directory of this archive for
 *  more details.
 */
#ifndef __UAPI_LINUX_MODULE_VDU_H__
#define __UAPI_LINUX_MODULE_VDU_H__

#include <linux/fb.h>


/* Module VDU registers */

#define MODULE_VDU_REGISTERS_SIZE		0x934

#define MVDU_VDU_CTRL_BASE			0x000
#define MVDU_VDU_STATUS_BASE			0x200
#define MVDU_VDU_INT_BASE			0x300
#define MVDU_VDU_SCALER_BASE			0x400
#define MVDU_VDU_DIF_BASE			0x500
#define MVDU_VDU_OSD_BASE			0x700
#define MVDU_VDU_MI_BASE			0x900

#define MVDU_REG_CTRL_VDU_ID			(MVDU_VDU_CTRL_BASE + 0x04)

#define MVDU_REG_CTRL_VDU_ENA			(MVDU_VDU_CTRL_BASE + 0x08)
#define MVDU_REG_CTRL_VDU_ENA_MVL_BASE_SW_ENA_SHIFT 9
#define MVDU_REG_CTRL_VDU_ENA_MVL_BASE_SW_ENA_MASK (1 << MVDU_REG_CTRL_VDU_ENA_MVL_BASE_SW_ENA_SHIFT)
#define MVDU_REG_CTRL_VDU_ENA_OSD_BASE_SW_ENA_SHIFT 8
#define MVDU_REG_CTRL_VDU_ENA_OSD_BASE_SW_ENA_MASK (1 << MVDU_REG_CTRL_VDU_ENA_OSD_BASE_SW_ENA_SHIFT)
#define MVDU_REG_CTRL_VDU_ENA_MVL_ENA_SHIFT	2
#define MVDU_REG_CTRL_VDU_ENA_MVL_ENA_MASK	(1 << MVDU_REG_CTRL_VDU_ENA_MVL_ENA_SHIFT)
#define MVDU_REG_CTRL_VDU_ENA_OSD_ENA_SHIFT	1
#define MVDU_REG_CTRL_VDU_ENA_OSD_ENA_MASK	(1 << MVDU_REG_CTRL_VDU_ENA_OSD_ENA_SHIFT)
#define MVDU_REG_CTRL_VDU_ENA_VDU_ENA_SHIFT	0
#define MVDU_REG_CTRL_VDU_ENA_VDU_ENA_MASK	(1 << MVDU_REG_CTRL_VDU_ENA_VDU_ENA_SHIFT)

#define MVDU_REG_CTRL_SOFT_RESET		(MVDU_VDU_CTRL_BASE + 0x0C)

#define MVDU_REG_STAT_VDU_DISP			(MVDU_VDU_STATUS_BASE + 0x04)
#define MVDU_REG_STAT_VDU_DISP_FIELD_SHIFT	3
#define MVDU_REG_STAT_VDU_DISP_FIELD_MASK	(1 << MVDU_REG_STAT_VDU_DISP_FIELD_SHIFT)
#define MVDU_REG_STAT_VDU_DISP_HBB_SHIFT	2
#define MVDU_REG_STAT_VDU_DISP_HBB_MASK		(1 << MVDU_REG_STAT_VDU_DISP_HBB_SHIFT)
#define MVDU_REG_STAT_VDU_DISP_VBB_SHIFT	1
#define MVDU_REG_STAT_VDU_DISP_VBB_MASK		(1 << MVDU_REG_STAT_VDU_DISP_VBB_SHIFT)

#define MVDU_REG_STAT_VDU_AVMP			(MVDU_VDU_STATUS_BASE + 0x08)
#define MVDU_REG_STAT_VDU_AVMP_MVL_AVMP_SHIFT	1
#define MVDU_REG_STAT_VDU_AVMP_MVL_AVMP_MASK	(1 << MVDU_REG_STAT_VDU_AVMP_MVL_AVMP_SHIFT)
#define MVDU_REG_STAT_VDU_AVMP_OSD_AVMP_SHIFT	0
#define MVDU_REG_STAT_VDU_AVMP_OSD_AVMP_MASK	(1 << MVDU_REG_STAT_VDU_AVMP_OSD_AVMP_SHIFT)

#define MVDU_REG_STAT_VDU_FIFO			(MVDU_VDU_STATUS_BASE + 0x0C)

#define MVDU_REG_INT_VDU_ENA			(MVDU_VDU_INT_BASE + 0x04)
#define MVDU_REG_INT_VDU_STAT			(MVDU_VDU_INT_BASE + 0x08)
#define MVDU_REG_INT_VDU_STAT_I_FIFO_EMPTY_SHIFT 25
#define MVDU_REG_INT_VDU_STAT_I_FIFO_EMPTY_MASK	(1 << MVDU_REG_INT_VDU_STAT_I_FIFO_EMPTY_SHIFT)
#define MVDU_REG_INT_VDU_STAT_O_FIFO_EMPTY_SHIFT 24
#define MVDU_REG_INT_VDU_STAT_O_FIFO_EMPTY_MASK	(1 << MVDU_REG_INT_VDU_STAT_O_FIFO_EMPTY_SHIFT)
#define MVDU_REG_INT_VDU_STAT_SA_SHIFT		18
#define MVDU_REG_INT_VDU_STAT_SA_MASK		(1 << MVDU_REG_INT_VDU_STAT_SA_SHIFT)
#define MVDU_REG_INT_VDU_STAT_H_SYNC_SHIFT	17
#define MVDU_REG_INT_VDU_STAT_H_SYNC_MASK	(1 << MVDU_REG_INT_VDU_STAT_H_SYNC_SHIFT)
#define MVDU_REG_INT_VDU_STAT_V_SYNC_SHIFT	16
#define MVDU_REG_INT_VDU_STAT_V_SYNC_MASK	(1 << MVDU_REG_INT_VDU_STAT_V_SYNC_SHIFT)
#define MVDU_REG_INT_VDU_STAT_FR_PRC_END_SHIFT	10
#define MVDU_REG_INT_VDU_STAT_FR_PRC_END_MASK	(1 << MVDU_REG_INT_VDU_STAT_FR_PRC_END_SHIFT)
#define MVDU_REG_INT_VDU_STAT_MVL_FR_RD_END_SHIFT 9
#define MVDU_REG_INT_VDU_STAT_MVL_FR_RD_END_MASK (1 << MVDU_REG_INT_VDU_STAT_MVL_FR_RD_END_SHIFT)
#define MVDU_REG_INT_VDU_STAT_OSD_FR_RD_END_SHIFT 8
#define MVDU_REG_INT_VDU_STAT_OSD_FR_RD_END_MASK (1 << MVDU_REG_INT_VDU_STAT_OSD_FR_RD_END_SHIFT)
#define MVDU_REG_INT_VDU_STAT_VDU_OFF_SHIFT	1
#define MVDU_REG_INT_VDU_STAT_VDU_OFF_MASK	(1 << MVDU_REG_INT_VDU_STAT_VDU_OFF_SHIFT)
#define MVDU_REG_INT_VDU_STAT_INT_SYS_ERR_SHIFT	0
#define MVDU_REG_INT_VDU_STAT_INT_SYS_ERR_MASK	(1 << MVDU_REG_INT_VDU_STAT_INT_SYS_ERR_SHIFT)

#define MVDU_REG_SCALER_CTRL			(MVDU_VDU_SCALER_BASE + 0x04)
#define MVDU_REG_SCAL_DROP_POLAR_STR_SHIFT	25
#define MVDU_REG_SCAL_DROP_POLAR_STR_MASK	(1 << MVDU_REG_SCAL_DROP_POLAR_STR_SHIFT)
#define MVDU_REG_SCAL_DROP_ENA_STR_SHIFT	24
#define MVDU_REG_SCAL_DROP_ENA_STR_MASK		(1 << MVDU_REG_SCAL_DROP_ENA_STR_SHIFT)
#define MVDU_REG_SCALER_V_FLT_ENA_SHIFT		17
#define MVDU_REG_SCALER_V_FLT_ENA_MASK		(1 << MVDU_REG_SCALER_V_FLT_ENA_SHIFT)
#define MVDU_REG_SCALER_H_FLT_ENA_SHIFT		16
#define MVDU_REG_SCALER_H_FLT_ENA_MASK		(1 << MVDU_REG_SCALER_H_FLT_ENA_SHIFT)
#define MVDU_REG_SCALER_V_CUT_ENA_SHIFT		11
#define MVDU_REG_SCALER_V_CUT_ENA_MASK		(1 << MVDU_REG_SCALER_V_CUT_ENA_SHIFT)
#define MVDU_REG_SCALER_H_CUT_ENA_SHIFT		10
#define MVDU_REG_SCALER_H_CUT_ENA_MASK		(1 << MVDU_REG_SCALER_H_CUT_ENA_SHIFT)
#define MVDU_REG_SCALER_V_UPSIZE_SHIFT		9
#define MVDU_REG_SCALER_V_UPSIZE_MASK		(1 << MVDU_REG_SCALER_V_UPSIZE_SHIFT)
#define MVDU_REG_SCALER_H_UPSIZE_SHIFT		8
#define MVDU_REG_SCALER_H_UPSIZE_MASK		(1 << MVDU_REG_SCALER_H_UPSIZE_SHIFT)
#define MVDU_REG_SCALER_V_SCALER_ENA_SHIFT	1
#define MVDU_REG_SCALER_V_SCALER_ENA_MASK	(1 << MVDU_REG_SCALER_V_SCALER_ENA_SHIFT)
#define MVDU_REG_SCALER_H_SCALER_ENA_SHIFT	0
#define MVDU_REG_SCALER_H_SCALER_ENA_MASK	(1 << MVDU_REG_SCALER_H_SCALER_ENA_SHIFT)

#define MVDU_REG_SCALER_SCH_Y			(MVDU_VDU_SCALER_BASE + 0x08)
#define MVDU_REG_SCALER_SCV_Y			(MVDU_VDU_SCALER_BASE + 0x0C)
#define MVDU_REG_SCALER_SCH_C			(MVDU_VDU_SCALER_BASE + 0x10)
#define MVDU_REG_SCALER_SCV_C			(MVDU_VDU_SCALER_BASE + 0x14)

#define MVDU_REG_SCALER_SIZE_Y			(MVDU_VDU_SCALER_BASE + 0x18)
#define MVDU_REG_SCALER_SIZE_VY_SHIFT		16
#define MVDU_REG_SCALER_SIZE_VY_MASK		(0xFFF << MVDU_REG_SCALER_SIZE_VY_SHIFT)
#define MVDU_REG_SCALER_SIZE_HY_SHIFT		0
#define MVDU_REG_SCALER_SIZE_HY_MASK		(0xFFF << MVDU_REG_SCALER_SIZE_HY_SHIFT)

#define MVDU_REG_SCALER_SIZE_C			(MVDU_VDU_SCALER_BASE + 0x1C)
#define MVDU_REG_SCALER_SIZE_VC_SHIFT		16
#define MVDU_REG_SCALER_SIZE_VC_MASK		(0xFFF << MVDU_REG_SCALER_SIZE_VC_SHIFT)
#define MVDU_REG_SCALER_SIZE_HC_SHIFT		0
#define MVDU_REG_SCALER_SIZE_HC_MASK		(0xFFF << MVDU_REG_SCALER_SIZE_HC_SHIFT)

#define MVDU_REG_SCALER_FLT_Y_C0		(MVDU_VDU_SCALER_BASE + 0x20)
#define MVDU_REG_SCALER_FLT_C0_HY_SHIFT		0
#define MVDU_REG_SCALER_FLT_C0_HY_MASK		(0xFF << MVDU_REG_SCALER_FLT_C0_HY_SHIFT)
#define MVDU_REG_SCALER_FLT_C0_VY_SHIFT		8
#define MVDU_REG_SCALER_FLT_C0_VY_MASK		(0xFF << MVDU_REG_SCALER_FLT_C0_VY_SHIFT)

#define MVDU_REG_SCALER_FLT_Y_C1		(MVDU_VDU_SCALER_BASE + 0x24)
#define MVDU_REG_SCALER_FLT_C1_HY_SHIFT		0
#define MVDU_REG_SCALER_FLT_C1_HY_MASK		(0xFF << MVDU_REG_SCALER_FLT_C1_HY_SHIFT)
#define MVDU_REG_SCALER_FLT_C1_VY_SHIFT		8
#define MVDU_REG_SCALER_FLT_C1_VY_MASK		(0xFF << MVDU_REG_SCALER_FLT_C1_VY_SHIFT)

#define MVDU_REG_SCALER_FLT_Y_C2		(MVDU_VDU_SCALER_BASE + 0x28)
#define MVDU_REG_SCALER_FLT_C2_HY_SHIFT		0
#define MVDU_REG_SCALER_FLT_C2_HY_MASK		(0xFF << MVDU_REG_SCALER_FLT_C2_HY_SHIFT)
#define MVDU_REG_SCALER_FLT_C2_VY_SHIFT		8
#define MVDU_REG_SCALER_FLT_C2_VY_MASK		(0xFF << MVDU_REG_SCALER_FLT_C2_VY_SHIFT)

#define MVDU_REG_SCALER_FLT_Y_C3		(MVDU_VDU_SCALER_BASE + 0x2C)
#define MVDU_REG_SCALER_FLT_Y_C4		(MVDU_VDU_SCALER_BASE + 0x30)

#define MVDU_REG_SCALER_FLT_NORM		(MVDU_VDU_SCALER_BASE + 0x48)
#define MVDU_REG_SCALER_HFLT_Y_N_SHIFT		0
#define MVDU_REG_SCALER_HFLT_Y_N_MASK		(0xFF << MVDU_REG_SCALER_HFLT_Y_N_SHIFT)
#define MVDU_REG_SCALER_VFLT_Y_N_SHIFT		0
#define MVDU_REG_SCALER_VFLT_Y_N_MASK		(0xFF << MVDU_REG_SCALER_VFLT_Y_N_SHIFT)
#define MVDU_REG_SCALER_HFLT_C_N_SHIFT		0
#define MVDU_REG_SCALER_HFLT_C_N_MASK		(0xFF << MVDU_REG_SCALER_HFLT_C_N_SHIFT)
#define MVDU_REG_SCALER_VFLT_C_N_SHIFT		0
#define MVDU_REG_SCALER_VFLT_C_N_MASK		(0xFF << MVDU_REG_SCALER_VFLT_C_N_SHIFT)

#define MVDU_REG_SCALER_FLT_C_C0		(MVDU_VDU_SCALER_BASE + 0x4C)
#define MVDU_REG_SCALER_FLT_C0_HC_SHIFT		0
#define MVDU_REG_SCALER_FLT_C0_HC_MASK		(0xFF << MVDU_REG_SCALER_FLT_C0_HC_SHIFT)
#define MVDU_REG_SCALER_FLT_C0_VC_SHIFT		8
#define MVDU_REG_SCALER_FLT_C0_VC_MASK		(0xFF << MVDU_REG_SCALER_FLT_C0_VC_SHIFT)

#define MVDU_REG_SCALER_FLT_C_C1		(MVDU_VDU_SCALER_BASE + 0x50)
#define MVDU_REG_SCALER_FLT_C1_HC_SHIFT		0
#define MVDU_REG_SCALER_FLT_C1_HC_MASK		(0xFF << MVDU_REG_SCALER_FLT_C1_HC_SHIFT)
#define MVDU_REG_SCALER_FLT_C1_VC_SHIFT		8
#define MVDU_REG_SCALER_FLT_C1_VC_MASK		(0xFF << MVDU_REG_SCALER_FLT_C1_VC_SHIFT)

#define MVDU_REG_SCALER_FLT_C_C2		(MVDU_VDU_SCALER_BASE + 0x54)
#define MVDU_REG_SCALER_FLT_C2_HC_SHIFT		0
#define MVDU_REG_SCALER_FLT_C2_HC_MASK		(0xFF << MVDU_REG_SCALER_FLT_C2_HC_SHIFT)
#define MVDU_REG_SCALER_FLT_C2_VC_SHIFT		8
#define MVDU_REG_SCALER_FLT_C2_VC_MASK		(0xFF << MVDU_REG_SCALER_FLT_C2_VC_SHIFT)

#define MVDU_REG_SCALER_FLT_C_C3		(MVDU_VDU_SCALER_BASE + 0x58)
#define MVDU_REG_SCALER_FLT_C_C4		(MVDU_VDU_SCALER_BASE + 0x5C)
#define MVDU_REG_SCALER_PHS_CUT_V		(MVDU_VDU_SCALER_BASE + 0x70)

#define MVDU_REG_SCALER_SIZE_CUT		(MVDU_VDU_SCALER_BASE + 0x74)
#define MVDU_REG_SCALER_SIZE_CUT_V_SHIFT	16
#define MVDU_REG_SCALER_SIZE_CUT_V_MASK		(0x7FF << MVDU_REG_SCALER_SIZE_CUT_V_SHIFT)
#define MVDU_REG_SCALER_SIZE_CUT_H_SHIFT	0
#define MVDU_REG_SCALER_SIZE_CUT_H_MASK		(0x7FF << MVDU_REG_SCALER_SIZE_CUT_H_SHIFT)

#define MVDU_REG_SCALER_PHS_CUT_H		(MVDU_VDU_SCALER_BASE + 0x78)
#define MVDU_REG_SCALER_CUT_H_L_SHIFT		16
#define MVDU_REG_SCALER_CUT_H_L_MASK		(0x7FF << MVDU_REG_SCALER_CUT_H_L_SHIFT)
#define MVDU_REG_SCALER_CUT_H_R_SHIFT		0
#define MVDU_REG_SCALER_CUT_H_R_MASK		(0x7FF << MVDU_REG_SCALER_CUT_H_R_SHIFT)

#define MVDU_REG_SCALER_MVL_CLR_Y		(MVDU_VDU_SCALER_BASE + 0x7C)
#define MVDU_REG_SCALER_MVL_CLR_Y_Cr_SHIFT	20
#define MVDU_REG_SCALER_MVL_CLR_Y_Cr_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Y_Cr_SHIFT)
#define MVDU_REG_SCALER_MVL_CLR_Y_Cb_SHIFT	10
#define MVDU_REG_SCALER_MVL_CLR_Y_Cb_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Y_Cb_SHIFT)
#define MVDU_REG_SCALER_MVL_CLR_Y_Y_SHIFT	0
#define MVDU_REG_SCALER_MVL_CLR_Y_Y_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Y_Y_SHIFT)

#define MVDU_REG_SCALER_MVL_CLR_Cb		(MVDU_VDU_SCALER_BASE + 0x80)
#define MVDU_REG_SCALER_MVL_CLR_Cb_Cr_SHIFT	20
#define MVDU_REG_SCALER_MVL_CLR_Cb_Cr_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Cb_Cr_SHIFT)
#define MVDU_REG_SCALER_MVL_CLR_Cb_Cb_SHIFT	10
#define MVDU_REG_SCALER_MVL_CLR_Cb_Cb_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Cb_Cb_SHIFT)
#define MVDU_REG_SCALER_MVL_CLR_Cb_Y_SHIFT	0
#define MVDU_REG_SCALER_MVL_CLR_Cb_Y_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Cb_Y_SHIFT)

#define MVDU_REG_SCALER_MVL_CLR_Cr		(MVDU_VDU_SCALER_BASE + 0x84)
#define MVDU_REG_SCALER_MVL_CLR_Cr_Cr_SHIFT	20
#define MVDU_REG_SCALER_MVL_CLR_Cr_Cr_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Cr_Cr_SHIFT)
#define MVDU_REG_SCALER_MVL_CLR_Cr_Cb_SHIFT	10
#define MVDU_REG_SCALER_MVL_CLR_Cr_Cb_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Cr_Cb_SHIFT)
#define MVDU_REG_SCALER_MVL_CLR_Cr_Y_SHIFT	0
#define MVDU_REG_SCALER_MVL_CLR_Cr_Y_MASK	(0x3FF << MVDU_REG_SCALER_MVL_CLR_Cr_Y_SHIFT)

#define MVDU_REG_DIF_CTRL			(MVDU_VDU_DIF_BASE + 0x04)
#define MVDU_REG_DIF_CTRL_VSYNC_P_SHIFT		17
#define MVDU_REG_DIF_CTRL_VSYNC_P_MASK		(1 << MVDU_REG_DIF_CTRL_VSYNC_P_SHIFT)
#define MVDU_REG_DIF_CTRL_HSYNC_P_SHIFT		16
#define MVDU_REG_DIF_CTRL_HSYNC_P_MASK		(1 << MVDU_REG_DIF_CTRL_HSYNC_P_SHIFT)
#define MVDU_REG_DIF_CTRL_SDTV_FORM_SHIFT	10
#define MVDU_REG_DIF_CTRL_SDTV_FORM_MASK	(1 << MVDU_REG_DIF_CTRL_SDTV_FORM_SHIFT)
#define MVDU_REG_DIF_CTRL_EXT_SYNC_EN_SHIFT	9
#define MVDU_REG_DIF_CTRL_EXT_SYNC_EN_MASK	(1 << MVDU_REG_DIF_CTRL_EXT_SYNC_EN_SHIFT)
#define MVDU_REG_DIF_CTRL_INT_SYNC_EN_SHIFT	8
#define MVDU_REG_DIF_CTRL_INT_SYNC_EN_MASK	(1 << MVDU_REG_DIF_CTRL_INT_SYNC_EN_SHIFT)
#define MVDU_REG_DIF_CTRL_VDU_MODE_SHIFT	0
#define MVDU_REG_DIF_CTRL_VDU_MODE_MASK		(0x1F << MVDU_REG_DIF_CTRL_VDU_MODE_SHIFT)

#define MVDU_REG_DIF_BGR			(MVDU_VDU_DIF_BASE + 0x08)
#define MVDU_REG_DIF_BGR_Y_SHIFT		16
#define MVDU_REG_DIF_BGR_Y_MASK			(0xFF << MVDU_REG_DIF_BGR_Y_SHIFT)
#define MVDU_REG_DIF_BGR_Cb_SHIFT		8
#define MVDU_REG_DIF_BGR_Cb_MASK		(0xFF << MVDU_REG_DIF_BGR_Cb_SHIFT)
#define MVDU_REG_DIF_BGR_Cr_SHIFT		0
#define MVDU_REG_DIF_BGR_Cr_MASK		(0xFF << MVDU_REG_DIF_BGR_Cr_SHIFT)

#define MVDU_REG_DIF_MVL_START			(MVDU_VDU_DIF_BASE + 0x0C)
#define MVDU_REG_DIF_MVL_START_H_SHIFT		0
#define MVDU_REG_DIF_MVL_START_H_MASK		(0x7FF << MVDU_REG_DIF_MVL_START_H_SHIFT)
#define MVDU_REG_DIF_MVL_START_V_SHIFT		16
#define MVDU_REG_DIF_MVL_START_V_MASK		(0x7FF << MVDU_REG_DIF_MVL_START_V_SHIFT)

#define MVDU_REG_DIF_BLANK			(MVDU_VDU_DIF_BASE + 0x10)
#define MVDU_REG_DIF_BLANK_HBLANK_SHIFT		0
#define MVDU_REG_DIF_BLANK_HBLANK_MASK		(0x3FF << MVDU_REG_DIF_BLANK_HBLANK_SHIFT)
#define MVDU_REG_DIF_BLANK_VBLANK_BEG_SHIFT	16
#define MVDU_REG_DIF_BLANK_VBLANK_BEG_MASK	(0x3F << MVDU_REG_DIF_BLANK_VBLANK_BEG_SHIFT)
#define MVDU_REG_DIF_BLANK_VBLANK_END_SHIFT	24
#define MVDU_REG_DIF_BLANK_VBLANK_END_MASK	(0x7 << MVDU_REG_DIF_BLANK_VBLANK_END_SHIFT)

#define MVDU_REG_DIF_FSIZE			(MVDU_VDU_DIF_BASE + 0x14)
#define MVDU_REG_DIF_FSIZE_HTOTAL_SHIFT		0
#define MVDU_REG_DIF_FSIZE_HTOTAL_MASK		(0xFFF << MVDU_REG_DIF_FSIZE_HTOTAL_SHIFT)
#define MVDU_REG_DIF_FSIZE_VTOTAL_SHIFT		16
#define MVDU_REG_DIF_FSIZE_VTOTAL_MASK		(0x7FF << MVDU_REG_DIF_FSIZE_VTOTAL_SHIFT)

#define MVDU_REG_DIF_ASIZE			(MVDU_VDU_DIF_BASE + 0x18)
#define MVDU_REG_DIF_ASIZE_HACTIVE_SHIFT	0
#define MVDU_REG_DIF_ASIZE_HACTIVE_MASK		(0x7FF << MVDU_REG_DIF_ASIZE_HACTIVE_SHIFT)
#define MVDU_REG_DIF_ASIZE_VACTIVE_SHIFT	16
#define MVDU_REG_DIF_ASIZE_VACTIVE_MASK		(0x7FF << MVDU_REG_DIF_ASIZE_VACTIVE_SHIFT)

#define MVDU_REG_DIF_HSYNC			(MVDU_VDU_DIF_BASE + 0x1C)
#define MVDU_REG_DIF_HSYNC_HSYNC_START_SHIFT	0
#define MVDU_REG_DIF_HSYNC_HSYNC_START_MASK	(0x3FF << MVDU_REG_DIF_HSYNC_HSYNC_START_SHIFT)
#define MVDU_REG_DIF_HSYNC_HSYNC_LEN_SHIFT	16
#define MVDU_REG_DIF_HSYNC_HSYNC_LEN_MASK	(0xFF << MVDU_REG_DIF_HSYNC_HSYNC_LEN_SHIFT)
#define MVDU_REG_DIF_HSYNC_HSYNC_DELAY_SHIFT	24
#define MVDU_REG_DIF_HSYNC_HSYNC_DELAY_MASK	(0xFF << MVDU_REG_DIF_HSYNC_HSYNC_DELAY_SHIFT)

#define MVDU_REG_DIF_VSYNC			(MVDU_VDU_DIF_BASE + 0x20)
#define MVDU_REG_DIF_VSYNC_VSYNC_START_SHIFT	0
#define MVDU_REG_DIF_VSYNC_VSYNC_START_MASK	(0x7 << MVDU_REG_DIF_VSYNC_VSYNC_START_SHIFT)
#define MVDU_REG_DIF_VSYNC_VSYNC_LEN_SHIFT	16
#define MVDU_REG_DIF_VSYNC_VSYNC_LEN_MASK	(0x7 << MVDU_REG_DIF_VSYNC_VSYNC_LEN_SHIFT)

#define MVDU_REG_OSD_BASEreg0			(MVDU_VDU_OSD_BASE + 0x00)
#define MVDU_REG_OSD_BASEreg1			(MVDU_VDU_OSD_BASE + 0x04)

#define MVDU_REG_OSD_COLOR_Y			(MVDU_VDU_OSD_BASE + 0x08)
#define MVDU_REG_OSD_COLOR_Y_R_SHIFT		0
#define MVDU_REG_OSD_COLOR_Y_R_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Y_R_SHIFT)
#define MVDU_REG_OSD_COLOR_Y_G_SHIFT		10
#define MVDU_REG_OSD_COLOR_Y_G_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Y_G_SHIFT)
#define MVDU_REG_OSD_COLOR_Y_B_SHIFT		20
#define MVDU_REG_OSD_COLOR_Y_B_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Y_B_SHIFT)

#define MVDU_REG_OSD_COLOR_Cb			(MVDU_VDU_OSD_BASE + 0x0C)
#define MVDU_REG_OSD_COLOR_Cb_R_SHIFT		0
#define MVDU_REG_OSD_COLOR_Cb_R_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Cb_R_SHIFT)
#define MVDU_REG_OSD_COLOR_Cb_G_SHIFT		10
#define MVDU_REG_OSD_COLOR_Cb_G_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Cb_G_SHIFT)
#define MVDU_REG_OSD_COLOR_Cb_B_SHIFT		20
#define MVDU_REG_OSD_COLOR_Cb_B_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Cb_B_SHIFT)

#define MVDU_REG_OSD_COLOR_Cr			(MVDU_VDU_OSD_BASE + 0x10)
#define MVDU_REG_OSD_COLOR_Cr_R_SHIFT		0
#define MVDU_REG_OSD_COLOR_Cr_R_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Cr_R_SHIFT)
#define MVDU_REG_OSD_COLOR_Cr_G_SHIFT		10
#define MVDU_REG_OSD_COLOR_Cr_G_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Cr_G_SHIFT)
#define MVDU_REG_OSD_COLOR_Cr_B_SHIFT		20
#define MVDU_REG_OSD_COLOR_Cr_B_MASK		(0x1FF << MVDU_REG_OSD_COLOR_Cr_B_SHIFT)

#define MVDU_REG_OSD_FIFO_END			(MVDU_VDU_OSD_BASE + 0x14)
#define MVDU_REG_OSD_CTRL			(MVDU_VDU_OSD_BASE + 0x18)

#define MVDU_REG_MI_CTRL			(MVDU_VDU_MI_BASE + 0x04)
#define MVDU_REG_MI_CTRL_BUF_BIT_ENDIAN_SHIFT	16
#define MVDU_REG_MI_CTRL_BUF_BIT_ENDIAN_MASK	(1 << MVDU_REG_MI_CTRL_BUF_BIT_ENDIAN_SHIFT)
#define MVDU_REG_MI_CTRL_YCbCr_FORMAT_SHIFT	9
#define MVDU_REG_MI_CTRL_YCbCr_FORMAT_MASK	(1 << MVDU_REG_MI_CTRL_YCbCr_FORMAT_SHIFT)
#define MVDU_REG_MI_CTRL_PLANE_NUM_SHIFT	8
#define MVDU_REG_MI_CTRL_PLANE_NUM_MASK		(1 << MVDU_REG_MI_CTRL_PLANE_NUM_SHIFT)
#define MVDU_REG_MI_CTRL_PLANE_ACCESS_SHIFT	2
#define MVDU_REG_MI_CTRL_PLANE_ACCESS_MASK	(1 << MVDU_REG_MI_CTRL_PLANE_ACCESS_SHIFT)
#define MVDU_REG_MI_CTRL_FILD_ACCESS_SHIFT	1
#define MVDU_REG_MI_CTRL_FILD_ACCESS_MASK	(1 << MVDU_REG_MI_CTRL_FILD_ACCESS_SHIFT)

#define MVDU_REG_MI_MVL_Y_BAreg0		(MVDU_VDU_MI_BASE + 0x08)
#define MVDU_REG_MI_MVL_Cb_BAreg0		(MVDU_VDU_MI_BASE + 0x0C)
#define MVDU_REG_MI_MVL_Cr_BAreg0		(MVDU_VDU_MI_BASE + 0x10)
#define MVDU_REG_MI_MVL_Y_BAreg1		(MVDU_VDU_MI_BASE + 0x14)
#define MVDU_REG_MI_MVL_Cb_BAreg1		(MVDU_VDU_MI_BASE + 0x18)
#define MVDU_REG_MI_MVL_Cr_BAreg1		(MVDU_VDU_MI_BASE + 0x1C)

#define MVDU_REG_MI_MVL_Y_SIZE			(MVDU_VDU_MI_BASE + 0x20)
#define MVDU_REG_MI_MVL_Y_V_SIZE_SHIFT		16
#define MVDU_REG_MI_MVL_Y_V_SIZE_MASK		(0x7FF << MVDU_REG_MI_MVL_Y_V_SIZE_SHIFT)
#define MVDU_REG_MI_MVL_Y_H_SIZE_SHIFT		0
#define MVDU_REG_MI_MVL_Y_H_SIZE_MASK		(0x7FF << MVDU_REG_MI_MVL_Y_H_SIZE_SHIFT)

#define MVDU_REG_MI_MVL_C_SIZE			(MVDU_VDU_MI_BASE + 0x24)
#define MVDU_REG_MI_MVL_C_V_SIZE_SHIFT		16
#define MVDU_REG_MI_MVL_C_V_SIZE_MASK		(0x7FF << MVDU_REG_MI_MVL_C_V_SIZE_SHIFT)
#define MVDU_REG_MI_MVL_C_H_SIZE_SHIFT		0
#define MVDU_REG_MI_MVL_C_H_SIZE_MASK		(0x7FF << MVDU_REG_MI_MVL_C_H_SIZE_SHIFT)

#define MVDU_REG_MI_MVL_FULL_SIZE		(MVDU_VDU_MI_BASE + 0x28)
#define MVDU_REG_MI_MVL_C_FULL_SIZE_SHIFT	16
#define MVDU_REG_MI_MVL_C_FULL_SIZE_MASK	(0x1FFF << MVDU_REG_MI_MVL_C_FULL_SIZE_SHIFT)
#define MVDU_REG_MI_MVL_Y_FULL_SIZE_SHIFT	0
#define MVDU_REG_MI_MVL_Y_FULL_SIZE_MASK	(0x1FFF << MVDU_REG_MI_MVL_Y_FULL_SIZE_SHIFT)

#define MVDU_REG_MI_AXI_MVL_PARAM		(MVDU_VDU_MI_BASE + 0x2C)
#define MVDU_REG_MI_MVL_FIFO_START		(MVDU_VDU_MI_BASE + 0x30)
#define MVDU_REG_MI_MVL_FIFO_END		(MVDU_VDU_MI_BASE + 0x34)
#define MVDU_REG_MI_AXI_OSD_PARAM		(MVDU_VDU_MI_BASE + 0x38)


/* Module VDU modes */

#define MVDU_MODE_SD_486_I_30		1
#define MVDU_MODE_SD_576_I_25		2
#define MVDU_MODE_HD_480_I_30		3
#define MVDU_MODE_HD_576_I_25		4
#define MVDU_MODE_HD_480_P_60		5
#define MVDU_MODE_HD_576_P_50		6
#define MVDU_MODE_HD_720_P_60		7
#define MVDU_MODE_HD_720_P_50		8
#define MVDU_MODE_HD_1080_I_30		9
#define MVDU_MODE_HD_1080_I_25		10
#define MVDU_MODE_HD_1080_P_30		11
#define MVDU_MODE_HD_1080_P_25		12

#define MVDU_MODE_DEFAULT	 0	

#define MVDU_MODE_FIRT			1
#define MVDU_MODE_LAST			12
#define MVDU_MODE_VALID(m)	((m) >= MVDU_MODE_FIRT && (m) <= MVDU_MODE_LAST)

#define MVDU_MODE_SD			0
#define MVDU_MODE_HD			1

static inline int mvdu_mode_def(int mode)
{
	switch (mode) {
	case MVDU_MODE_SD_486_I_30:
	case MVDU_MODE_SD_576_I_25:
		return MVDU_MODE_SD;
	default:
		return MVDU_MODE_HD;
	}
}

static inline const char *mvdu_mode_def_str(int mode)
{
	switch (mode) {
	case MVDU_MODE_SD_486_I_30:
	case MVDU_MODE_SD_576_I_25:
		return "SD";
	default:
		return "HD";
	}
}

#define MVDU_MODE_PROGRESSIVE		0
#define MVDU_MODE_INTERLACED		1

static inline int mvdu_mode_vmode(int mode)
{
	switch (mode) {
	case MVDU_MODE_HD_480_P_60:
	case MVDU_MODE_HD_576_P_50:
	case MVDU_MODE_HD_720_P_60:
	case MVDU_MODE_HD_720_P_50:
	case MVDU_MODE_HD_1080_P_30:
	case MVDU_MODE_HD_1080_P_25:
		return MVDU_MODE_PROGRESSIVE;
	default:
		return MVDU_MODE_INTERLACED;
	}
}

#define MVDU_OSD_BITSPERPIXEL		16
#define MVDU_OSD_BYTESPERPIXEL		(MVDU_OSD_BITSPERPIXEL/8)

/* MVDU_OSD_COLOR_* values used by hardware in osd_area_header */
#define MVDU_COLOR_MODE_DEFAULT		0	/* use per-framebuffer setting */
#define MVDU_COLOR_MODE_565		1
#define MVDU_COLOR_MODE_5551		2
#define MVDU_COLOR_MODE_4444		3

static inline const char *mvdu_color_mode_str(int color_mode)
{
	switch (color_mode) {
	case MVDU_COLOR_MODE_565:
		return "RGB565";
	case MVDU_COLOR_MODE_5551:
		return "RGBA5551";
	case MVDU_COLOR_MODE_4444:
		return "RGBA4444";
	default:
		return "<undefined>";
	}
}

#define MVDU_OSD_BUFFER_WIDTH	2048	/* For alignment purposes */
#define MVDU_OSD_BUFFER_HEIGHT	(2160 * 4)

struct mvdu_fb_area {
	int x, y, w, h;
	int alpha;
	int color_mode;
	int buf_x, buf_y;
};

struct mvdu_fb_areas {
	int areas_nr;
	struct mvdu_fb_area *areas;
};

struct rgb888 {
	unsigned char red, green, blue;
};

#define MVDU_VIDEO_IN_MIN_WIDTH		160
#define MVDU_VIDEO_IN_MAX_WIDTH		1920
#define MVDU_VIDEO_IN_MIN_HEIGHT	100
#define MVDU_VIDEO_IN_MAX_HEIGHT	1080

struct mvdu_rect {
	int x, y, w, h;
};

struct mvdu_filter_params {
	unsigned int prev, this, next;
};

struct mvdu_video_params {

	int in_mode;
#define MVDU_VIDEO_IN_FRAME_TO_P	1
#define MVDU_VIDEO_IN_FRAME_TO_PP	2
#define MVDU_VIDEO_IN_FRAME_TO_I	3
#define MVDU_VIDEO_IN_2FRAMES_TO_I_NORM	4
#define MVDU_VIDEO_IN_2FRAMES_TO_I_FULL	5
#define MVDU_VIDEO_IN_SUBFRAMES_TO_P	6
#define MVDU_VIDEO_IN_SUBFRAMES_TO_I	7

	int out_mode;		/* MVDU_MODE_* - output mode selection */

	unsigned int pixel_format : 1;
#define MVDU_PIXEL_FORMAT_422		0	/* YCbCr 4:2:2 */
#define MVDU_PIXEL_FORMAT_420		1	/* YCbCr 4:2:0 */

	unsigned int planes_nr : 1;
#define MVDU_TWO_PLANES			0	/* 2 planes (linear or macroblock) */
#define MVDU_THREE_PLANES		1	/* 3 planes (linear only) */

	unsigned int plane_format : 1;
#define MVDU_PLANE_FORMAT_LINEAR	0	/* linear (2 or 3 planes) */
#define MVDU_PLANE_FORMAT_MACROBLOCK	1	/* macroblock (2 planes only) */

	unsigned int color_space : 1;
#define MVDU_COLOR_SPACE_SD		0
#define MVDU_COLOR_SPACE_HD		1

	unsigned int byte_order	: 1;
#define MVDU_VIDEO_LITTLE_ENDIAN	0
#define MVDU_VIDEO_BIG_ENDIAN		1

	unsigned int use_dropper : 1;		/* for FRAME_TO_I and
						   2FRAMES_TO_I_NORM in_modes
						   only */

	int y_linestep;		/* for linear formats - in bytes, for macroblock formats - in macroblocks */
	int c_linestep;		/* same for C planes */
#define MVDU_BYTES_PER_LINE_Y(x)	((x)->y_linestep)
#define MVDU_BYTES_PER_LINE_C(x)	((x)->c_linestep)
#define MVDU_MACROBLOCKS_PER_LINE_Y(x)	((x)->y_linestep)
#define MVDU_MACROBLOCKS_PER_LINE_C(x)	((x)->c_linestep)

	int offsets[3];
#define MVDU_OFFSET_Y(x) ((x)->offsets[0])
#define MVDU_OFFSET_C(x) ((x)->offsets[1])
#define MVDU_OFFSET_CB(x) ((x)->offsets[1])
#define MVDU_OFFSET_CR(x) ((x)->offsets[2])

	struct mvdu_rect src;	/* frame part to display - in "whole frame" coordinates */
	struct mvdu_rect dst;	/* where result should be - in "whole frame" coordinates */

	unsigned int filter_enabled : 1;	/* filter enable flag */
	struct mvdu_filter_params y_hor;	/* weights for horizontal Y filter */
	struct mvdu_filter_params c_hor;	/* weights for horizontal C filter */
	struct mvdu_filter_params y_ver;	/* weights for vertical Y filter */
	struct mvdu_filter_params c_ver;	/* weights for vertical C filter */

	unsigned int bg_enabled : 1;	/* set background color if non-zero */
	struct rgb888 bg_color;		/* background color to set */

	int valid;
#define MVDU_VALID_IN_MODE	(1 << 0)	/* selects in_mode */
#define MVDU_VALID_OUT_MODE	(1 << 1)	/* selects out_mode */
#define MVDU_VALID_FORMAT	(1 << 2)	/* selects format-related fields */
#define MVDU_VALID_SRC		(1 << 3)	/* selects src rect */
#define MVDU_VALID_DST		(1 << 4)	/* selects dst rect */
#define MVDU_VALID_FILTER	(1 << 5)	/* selects filter-related fields */
#define MVDU_VALID_BG		(1 << 6)	/* selects background-related fields */
};

#define MVDU_VALID_ENOUGH	(MVDU_VALID_IN_MODE | MVDU_VALID_OUT_MODE | \
				 MVDU_VALID_FORMAT | MVDU_VALID_SRC | MVDU_VALID_DST)

#define MVDU_VIDEO_IN_VALID(m)	((m) >= 1 && (m) <= 7)

static inline int mvdu_vmode_for_in(int in)
{
	switch (in) {
	case MVDU_VIDEO_IN_FRAME_TO_P:
	case MVDU_VIDEO_IN_FRAME_TO_PP:
	case MVDU_VIDEO_IN_SUBFRAMES_TO_P:
		return MVDU_MODE_PROGRESSIVE;
	default:
		return MVDU_MODE_INTERLACED;
	}
}

#define VIDIOC_S_PARAMS    _IOW('V', 202, struct mvdu_video_params)
#define VIDIOC_G_PARAMS    _IOR('V', 203, struct mvdu_video_params)

/* Use 1088 not 1080 because 1080 % 16 != 0 */
//#define MVDU_VIDEO_MAX_BUFFER_SIZE (2 * 1920 * 1088)
#define MVDU_VIDEO_MAX_BUFFER_SIZE (800*4096) /*slighly bigger buffer than msvd requsts*/
#define MVDU_VIDEO_MAX_BUFFERS 32 

/* FIXME: 32-bit dependency */
#define MVDU_VIDEO_BASE_PHYS(cap)	((cap)->reserved[0])

#define MVDU_FB_IOC_MAGIC      0xDE
#define FBIOPUT_BACKGROUND     _IOW(MVDU_FB_IOC_MAGIC, 0, struct rgb888)
#define FBIOGET_BACKGROUND     _IOR(MVDU_FB_IOC_MAGIC, 1, struct rgb888)
#define FBIOPUT_OSDAREAS       _IOW(MVDU_FB_IOC_MAGIC, 2, struct mvdu_fb_areas)
#define FBIOGET_OSDAREAS       _IOR(MVDU_FB_IOC_MAGIC, 3, struct mvdu_fb_areas)

#ifndef FBIO_WAITFORVSYNC
#define FBIO_WAITFORVSYNC      _IOW('F', 0x20, __u32)
#endif

#endif /*__UAPI_LINUX_MODULE_VDU_H__*/
